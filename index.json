{
  "api/LSL4Unity.Editor.BuildHooks.html": {
    "href": "api/LSL4Unity.Editor.BuildHooks.html",
    "title": "Class BuildHooks | LSL 4 Unity documentation",
    "keywords": "Class BuildHooks Inheritance Object BuildHooks Namespace : LSL4Unity.Editor Assembly : cs.temp.dll.dll Syntax public class BuildHooks Methods OnPostprocessBuild(BuildTarget, String) Declaration public static void OnPostprocessBuild(BuildTarget target, string buildPath) Parameters Type Name Description BuildTarget target String buildPath"
  },
  "api/LSL4Unity.Editor.html": {
    "href": "api/LSL4Unity.Editor.html",
    "title": "Namespace LSL4Unity.Editor | LSL 4 Unity documentation",
    "keywords": "Namespace LSL4Unity.Editor Classes BuildHooks LSLEditorIntegration LSLShowStreamsWindow TimeSyncEditor"
  },
  "api/LSL4Unity.Editor.LSLEditorIntegration.html": {
    "href": "api/LSL4Unity.Editor.LSLEditorIntegration.html",
    "title": "Class LSLEditorIntegration | LSL 4 Unity documentation",
    "keywords": "Class LSLEditorIntegration Inheritance Object LSLEditorIntegration Namespace : LSL4Unity.Editor Assembly : cs.temp.dll.dll Syntax public class LSLEditorIntegration Fields BUNDLE_ENDING Declaration public const string BUNDLE_ENDING = \".bundle\" Field Value Type Description String DLL_ENDING Declaration public const string DLL_ENDING = \".dll\" Field Value Type Description String LIB32_NAME Declaration public const string LIB32_NAME = \"liblsl32\" Field Value Type Description String LIB64_NAME Declaration public const string LIB64_NAME = \"liblsl64\" Field Value Type Description String SO_ENDING Declaration public const string SO_ENDING = \".so\" Field Value Type Description String"
  },
  "api/LSL4Unity.Editor.LSLShowStreamsWindow.html": {
    "href": "api/LSL4Unity.Editor.LSLShowStreamsWindow.html",
    "title": "Class LSLShowStreamsWindow | LSL 4 Unity documentation",
    "keywords": "Class LSLShowStreamsWindow Inheritance Object LSLShowStreamsWindow Namespace : LSL4Unity.Editor Assembly : cs.temp.dll.dll Syntax public class LSLShowStreamsWindow : EditorWindow Methods Init() Declaration public void Init()"
  },
  "api/LSL4Unity.Editor.TimeSyncEditor.html": {
    "href": "api/LSL4Unity.Editor.TimeSyncEditor.html",
    "title": "Class TimeSyncEditor | LSL 4 Unity documentation",
    "keywords": "Class TimeSyncEditor Inheritance Object TimeSyncEditor Namespace : LSL4Unity.Editor Assembly : cs.temp.dll.dll Syntax public class TimeSyncEditor : UnityEditor.Editor"
  },
  "api/LSL4Unity.html": {
    "href": "api/LSL4Unity.html",
    "title": "Namespace LSL4Unity | LSL 4 Unity documentation",
    "keywords": "Namespace LSL4Unity Classes liblsl liblsl.ContinuousResolver A convenience class that resolves streams continuously in the background throughout its lifetime and which can be queried at any time for the set of streams that are currently visible on the network. liblsl.InternalException Exception class that indicates that an internal error has occurred inside liblsl. liblsl.LostException Exception class that indicates that a stream inlet's source has been irrecoverably lost. liblsl.StreamInfo The stream_info object stores the declaration of a data stream. Represents the following information: stream data format (#channels, channel format) core information (stream name, content type, sampling rate) optional meta-data about the stream content (channel labels, measurement units, etc.) Whenever a program wants to provide a new stream on the lab network, it will typically first create a stream_info to describe its properties and then construct a stream_outlet with it to create the stream on the network. Recipients who discover the outlet can query the stream_info; it is also written to disk when recording the stream (playing a similar role as a file header). liblsl.StreamInlet A stream inlet. Inlets are used to receive streaming data (and meta-data) from the lab network. liblsl.StreamOutlet A stream outlet. Outlets are used to make streaming data (and the meta-data) available on the lab network. LSLMarkerStream LSLOutlet LSLStreamInfoWrapper LSLTimeSync This singleton should provide an dedicated timestamp for each update call or fixed update LSL sample! So that each sample provided by an Unity3D app has the same timestamp Important! Make sure that the script is called before the default execution order! LSLTransformOutlet An reusable example of an outlet which provides the orientation and world position of an entity of an Unity Scene to LSL. LSLUtils Resolver Encapsulates the lookup logic for LSL streams with an event based appraoch your custom stream inlet implementations could be subscribed to the On. ScriptOrder This attribute is used to define specific script execution orders when necessary! Example: LSLTimeSync -> should be called at the beginning of each frame before other scripts use it's properties. Original from Unity forum: https://forum.unity3d.com/threads/script-execution-order-manipulation.130805/ StreamEvent Structs liblsl.XMLElement A lightweight XML element tree; models the Desc() field of liblsl.StreamInfo . Has a name and can have multiple named children or have text content as value; attributes are omitted. Insider note: The interface is modeled after a subset of pugixml's node type and is compatible with it. Enums liblsl.channel_format_t Data format of a channel (each transmitted sample holds an array of channels). liblsl.processing_options_t Post-processing options for stream inlets. MomentForSampling"
  },
  "api/LSL4Unity.liblsl.channel_format_t.html": {
    "href": "api/LSL4Unity.liblsl.channel_format_t.html",
    "title": "Enum liblsl.channel_format_t | LSL 4 Unity documentation",
    "keywords": "Enum liblsl.channel_format_t Data format of a channel (each transmitted sample holds an array of channels). Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public enum channel_format_t : byte Fields Name Description cf_double64 For universal numeric data as long as permitted by network and disk budget. (e.g., microvolts). Integers from -16777216 to 16777216 are represented accurately. cf_float32 For up to 24-bit precision measurements in the appropriate physical unit. cf_int16 For very high rate signals (40Khz+) or consumer-grade audio meta-data to represent meaningful units. Useful for application event codes or other coded data. cf_int32 For high-rate digitized formats that require 32-bit precision. Depends critically on complex event descriptions, etc. cf_int64 For now only for future compatibility. Support for this type is not yet exposed in all languages. Not recommended for encoding string data. cf_int8 For binary signals or other coded data. (for professional audio float is recommended). cf_string For variable-length ASCII strings or data blobs, such as video frames, the largest representable integer is 53-bit. cf_undefined Can not be transmitted. Also, some builds of liblsl will not be able to send or receive data of this type."
  },
  "api/LSL4Unity.liblsl.ContinuousResolver.html": {
    "href": "api/LSL4Unity.liblsl.ContinuousResolver.html",
    "title": "Class liblsl.ContinuousResolver | LSL 4 Unity documentation",
    "keywords": "Class liblsl.ContinuousResolver A convenience class that resolves streams continuously in the background throughout its lifetime and which can be queried at any time for the set of streams that are currently visible on the network. Inheritance Object liblsl.ContinuousResolver Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class ContinuousResolver Constructors ContinuousResolver(Double) Initializes a new instance of the liblsl.ContinuousResolver class that resolves all streams on the network. This is analogous to the functionality offered by the free function ResolveStreams(Double) . Declaration public ContinuousResolver(double forgetAfter = 5) Parameters Type Name Description Double forgetAfter When a stream is no longer visible on the network (e.g., because it was shut down), this is the time in seconds after which it is no longer reported by the resolver. ContinuousResolver(String, Double) Initializes a new instance of the liblsl.ContinuousResolver class that resolves all streams that match a given XPath 1.0 predicate. This is analogous to the functionality provided by the free function ResolveStream(String, Int32, Double) . Declaration public ContinuousResolver(string pred, double forgetAfter = 5) Parameters Type Name Description String pred The predicate string, e.g. \"name='BioSemi'\" or \"type='EEG' and starts-with(name,'BioSemi') and count(info/desc/channel)=32\" Double forgetAfter When a stream is no longer visible on the network (e.g., because it was shut down), this is the time in seconds after which it is no longer reported by the resolver. ContinuousResolver(String, String, Double) Initializes a new instance of the liblsl.ContinuousResolver class that resolves all streams with a specific value for a given property. This is analogous to the functionality provided by the free function ResolveStream(String, String, Int32, Double) . Declaration public ContinuousResolver(string prop, string value, double forgetAfter = 5) Parameters Type Name Description String prop The liblsl.StreamInfo property that should have a specific value (e.g., \"name\", \"type\", \"SourceId\", or \"desc/manufaturer\"). String value The string value that the property should have (e.g., \"EEG\" as the type property). Double forgetAfter When a stream is no longer visible on the network (e.g., because it was shut down), this is the time in seconds after which it is no longer reported by the resolver. Methods Finalize() Finalizes an instance of the liblsl.ContinuousResolver class. Declaration protected void Finalize() Results() Obtain the set of currently present streams on the network (i.e. resolve result). Declaration public liblsl.StreamInfo[] Results() Returns Type Description liblsl.StreamInfo [] An array of matching stream info objects (excluding their meta-data), any of which can subsequently be used to open an inlet."
  },
  "api/LSL4Unity.liblsl.html": {
    "href": "api/LSL4Unity.liblsl.html",
    "title": "Class liblsl | LSL 4 Unity documentation",
    "keywords": "Class liblsl Inheritance Object liblsl Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class liblsl Fields DEDUCED_TIMESTAMP Constant to indicate that a sample has the next successive time stamp. This is an optional optimization to transmit less data per sample. The stamp is then deduced from the preceding one according to the stream's sampling rate (in the case of an irregular rate, the same time stamp as before will is assumed). Declaration public const double DEDUCED_TIMESTAMP = -1 Field Value Type Description Double Indicate that a sample has the next successive time stamp. FOREVER A very large time duration (> 1 year) for timeout values. Declaration public const double FOREVER = 32000000 Field Value Type Description Double A very large time duration (> 1 year). Remarks Note that significantly larger numbers can cause the timeout to be invalid on some operating systems (e.g., 32-bit UNIX). IRREGULAR_RATE Constant to indicate that a stream has variable sampling rate. Declaration public const double IRREGULAR_RATE = 0 Field Value Type Description Double Indicate that a stream has variable sampling rate. Methods CheckError(Int32) Check an error condition and throw an exception if appropriate. Declaration public static void CheckError(int code) Parameters Type Name Description Int32 code The error code. Exceptions Type Condition TimeoutException The operation failed due to a timeout. liblsl.LostException The stream has been lost. ArgumentException An argument was incorrectly specified (e.g., wrong format or wrong length). liblsl.InternalException An internal internal error has occurred. Exception An unknown error has occurred. LibraryVersion() Version of the liblsl library. The major version is LibraryVersion() / 100; The minor version is LibraryVersion() % 100; Declaration public static int LibraryVersion() Returns Type Description Int32 The library version. LocalClock() Obtain a local system time stamp in seconds. The resolution is better than a millisecond. This reading can be used to assign time stamps to samples as they are being acquired. If the \"age\" of a sample is known at a particular time (e.g., from USB transmission delays), it can be used as an offset to LocalClock() to obtain a better estimate of when a sample was actually captured. See StreamOutlet::PushSample() for a use case. Declaration public static double LocalClock() Returns Type Description Double The local system time stamp in seconds. ProtocolVersion() Version of the lsl protocol. The major version is ProtocolVersion() / 100; The minor version is ProtocolVersion() % 100; Clients with different minor versions are protocol-compatible with each other while clients with different major versions will refuse to work together. Declaration public static int ProtocolVersion() Returns Type Description Int32 The protocole version. ResolveStream(String, Int32, Double) Resolve all streams that match a given predicate. Advanced query that allows to impose more conditions on the retrieved streams; the given string is an XPath 1.0 predicate for the info node (omitting the surrounding []'s). Declaration public static liblsl.StreamInfo[] ResolveStream(string pred, int minimum = 1, double timeout = 32000000) Parameters Type Name Description String pred The predicate string, e.g. \"name='BioSemi'\" or \"type='EEG' and starts-with(name,'BioSemi') and count(info/desc/channel)=32\". Int32 minimum Optionally return at least this number of streams. Double timeout Optionally a timeout of the operation, in seconds (default: no timeout). If the timeout expires, less than the desired number of streams (possibly none) will be returned. Returns Type Description liblsl.StreamInfo [] An array of matching stream info objects (excluding their meta-data), any of which can subsequently be used to open an inlet. Remarks See Also : Wikipedia XPath 1.0 . ResolveStream(String, String, Int32, Double) Resolve all streams with a specific value for a given property. If the goal is to resolve a specific stream, this method is preferred over resolving all streams and then selecting the desired one. Declaration public static liblsl.StreamInfo[] ResolveStream(string prop, string value, int minimum = 1, double timeout = 32000000) Parameters Type Name Description String prop The liblsl.StreamInfo property that should have a specific value (e.g., \"name\", \"type\", \"SourceId\", or \"desc/manufaturer\"). String value The string value that the property should have (e.g., \"EEG\" as the type property). Int32 minimum Optionally return at least this number of streams. Double timeout Optionally a timeout of the operation, in seconds (default: no timeout). If the timeout expires, less than the desired number of streams (possibly none) will be returned. Returns Type Description liblsl.StreamInfo [] An array of matching stream info objects (excluding their meta-data), any of which can subsequently be used to open an inlet. ResolveStreams(Double) Resolve all streams on the network. This function returns all currently available streams from any outlet on the network. The network is usually the subnet specified at the local router, but may also include a multicast group of machines (given that the network supports it), or list of hostnames. These details may optionally be customized by the experimenter in a configuration file (see Network Connectivity in the LSL wiki). This is the default mechanism used by the browsing programs and the recording program. Declaration public static liblsl.StreamInfo[] ResolveStreams(double waitTime = 1) Parameters Type Name Description Double waitTime The waiting time for the operation, in seconds, to search for streams. Returns Type Description liblsl.StreamInfo [] An array of stream info objects (excluding their desc field), any of which can subsequently be used to open an inlet. The full info can be retrieve from the inlet. Remarks If [waitTime] is too short (less than 0.5s) only a subset (or none) of the outlets that are present on the network may be returned."
  },
  "api/LSL4Unity.liblsl.InternalException.html": {
    "href": "api/LSL4Unity.liblsl.InternalException.html",
    "title": "Class liblsl.InternalException | LSL 4 Unity documentation",
    "keywords": "Class liblsl.InternalException Exception class that indicates that an internal error has occurred inside liblsl. Inheritance Object Exception liblsl.InternalException Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class InternalException : Exception, ISerializable, _Exception Constructors InternalException() Declaration public InternalException() InternalException(SerializationInfo, StreamingContext) Declaration protected InternalException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context InternalException(String) Declaration public InternalException(string message) Parameters Type Name Description String message InternalException(String, Exception) Declaration public InternalException(string message, Exception inner) Parameters Type Name Description String message Exception inner See Also Exception"
  },
  "api/LSL4Unity.liblsl.LostException.html": {
    "href": "api/LSL4Unity.liblsl.LostException.html",
    "title": "Class liblsl.LostException | LSL 4 Unity documentation",
    "keywords": "Class liblsl.LostException Exception class that indicates that a stream inlet's source has been irrecoverably lost. Inheritance Object Exception liblsl.LostException Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class LostException : Exception, ISerializable, _Exception Constructors LostException() Declaration public LostException() LostException(SerializationInfo, StreamingContext) Declaration protected LostException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context LostException(String) Declaration public LostException(string message) Parameters Type Name Description String message LostException(String, Exception) Declaration public LostException(string message, Exception inner) Parameters Type Name Description String message Exception inner See Also Exception"
  },
  "api/LSL4Unity.liblsl.processing_options_t.html": {
    "href": "api/LSL4Unity.liblsl.processing_options_t.html",
    "title": "Enum liblsl.processing_options_t | LSL 4 Unity documentation",
    "keywords": "Enum liblsl.processing_options_t Post-processing options for stream inlets. Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public enum processing_options_t : byte Fields Name Description post_ALL The combination of all possible post-processing options. post_clocksync Perform automatic clock synchronization; equivalent to manually adding the TimeCorrection() value (this is the default behavior of the inlet). post_dejitter Remove jitter from time stamps. This will apply a smoothing algorithm to the received time stamps; to the received time stamps. post_monotonize Force the time-stamps to be monotonically ascending (only makes sense if timestamps are dejittered). post_none No automatic post-processing; return the ground-truth time stamps for manual post-processing. post_threadsafe Post-processing is thread-safe (same inlet can be read from by multiple threads); uses somewhat more CPU."
  },
  "api/LSL4Unity.liblsl.StreamInfo.html": {
    "href": "api/LSL4Unity.liblsl.StreamInfo.html",
    "title": "Class liblsl.StreamInfo | LSL 4 Unity documentation",
    "keywords": "Class liblsl.StreamInfo The stream_info object stores the declaration of a data stream. Represents the following information: stream data format (#channels, channel format) core information (stream name, content type, sampling rate) optional meta-data about the stream content (channel labels, measurement units, etc.) Whenever a program wants to provide a new stream on the lab network, it will typically first create a stream_info to describe its properties and then construct a stream_outlet with it to create the stream on the network. Recipients who discover the outlet can query the stream_info; it is also written to disk when recording the stream (playing a similar role as a file header). Inheritance Object liblsl.StreamInfo Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class StreamInfo Constructors StreamInfo(IntPtr) Initializes a new instance of the liblsl.StreamInfo class. Declaration public StreamInfo(IntPtr handle) Parameters Type Name Description IntPtr handle The handle. StreamInfo(String, String, Int32, Double, liblsl.channel_format_t, String) Initializes a new instance of the liblsl.StreamInfo object. Core stream information is specified here. Any remaining meta-data can be added later. Declaration public StreamInfo(string name, string type, int channelCount = 1, double sampling = 0, liblsl.channel_format_t channelFormat = liblsl.channel_format_t.cf_float32, string sourceId = \"\") Parameters Type Name Description String name Name of the stream. Describes the device (or product series) that this stream makes available (for use by programs, experimenters or data analysts). Cannot be empty. String type Content type of the stream. Please see https://github.com/sccn/xdf/wiki/Meta-Data (or web search for: meta-data) for pre-defined content-type names, but you can also make up your own. The content type is the preferred way to find streams (as opposed to searching by name). Int32 channelCount Number of channels per sample. This stays constant for the lifetime of the stream. Double sampling The sampling rate (in Hz) as advertised by the data source, if regular (otherwise set to IRREGULAR_RATE). liblsl.channel_format_t channelFormat Format/type of each channel. If your channels have different formats, consider supplying multiple streams or use the largest type that can hold them all (such as cf_double64). String sourceId Unique identifier of the device or source of the data, if available (such as the serial number). This is critical for system robustness since it allows recipients to recover from failure even after the serving app, device or computer crashes (just by finding a stream with the same source id on the network again). Therefore, it is highly recommended to always try to provide whatever information can uniquely identify the data source itself. Methods AsXML() Retrieve the entire liblsl.StreamInfo in XML format. This yields an XML document (in string form) whose top-level element is <info>. The info element contains one element for each field of the stream_info class, including: a) the core elements Name , Type , ChannelCount , Sampling , ChannelFormat , SourceId b) the misc elements Version , CreatedAt , Uid , SessionId , v4address , v4data_port , v4service_port , v6address , v6data_port , v6service_port c) the extended description element desc with user-defined sub-elements. Declaration public string AsXML() Returns Type Description String A string with the entire liblsl.StreamInfo . ChannelCount() Number of channels of the stream. A stream has at least one channel; the channel count stays constant for all samples. Declaration public int ChannelCount() Returns Type Description Int32 The Number of channels of the stream. ChannelFormat() Channel format of the stream. All channels in a stream have the same format. However, a device might offer multiple time-synched streams each with its own format. Declaration public liblsl.channel_format_t ChannelFormat() Returns Type Description liblsl.channel_format_t The hannel format of the stream (in liblsl.channel_format_t enum) CreatedAt() Creation time stamp of the stream. This is the time stamp when the stream was first created (as determined via LocalClock() on the providing machine). Declaration public double CreatedAt() Returns Type Description Double The Time Stamp (in double ). Desc() Extended description of the stream. It is highly recommended that at least the channel labels are described here. See code examples on the LSL wiki. Other information, such as amplifier settings, measurement units if deviating from defaults, setup information, subject information, etc., can be specified here, as well. Meta-data recommendations follow the XDF file format project ( https://github.com/sccn/xdf/wiki/Meta-Data or web search for: XDF meta-data). Declaration public liblsl.XMLElement Desc() Returns Type Description liblsl.XMLElement A liblsl.XMLElement containing the description. Remarks if you use a stream content type for which meta-data recommendations exist, please try to lay out your meta-data in agreement with these recommendations for compatibility with other applications. Finalize() Finalizes an instance of the liblsl.StreamInfo object. Declaration protected void Finalize() Handle() Get access to the underlying handle. Declaration public IntPtr Handle() Returns Type Description IntPtr the Handle. Hostname() Hostname of the providing machine. Declaration public string Hostname() Returns Type Description String The Hostname (in string ). Name() Name of the stream. This is a human-readable name. For streams offered by device modules, it refers to the type of device or product series that is generating the data of the stream. If the source is an application, the name may be a more generic or specific identifier. Multiple streams with the same name can coexist, though potentially at the cost of ambiguity (for the recording app or experimenter). Declaration public string Name() Returns Type Description String The name of the stream. Sampling() Sampling rate of the stream, according to the source (in Hz). If a stream is irregularly sampled, this should be set to IRREGULAR_RATE. Note that no data will be lost even if this sampling rate is incorrect or if a device has temporary hiccups, since all samples will be recorded anyway (except for those dropped by the device itself). However, when the recording is imported into an application, a good importer may correct such errors more accurately if the advertised sampling rate was close to the specs of the device. Declaration public double Sampling() Returns Type Description Double The Sampling rate of the stream (in double ). SessionId() Session ID for the given stream. The session id is an optional human-assigned identifier of the recording session. While it is rarely used, it can be used to prevent concurrent recording activitites on the same sub-network (e.g., in multiple experiment areas) from seeing each other's streams (assigned via a configuration file by the experimenter, see Network Connectivity in the LSL wiki). Declaration public string SessionId() Returns Type Description String The Session Identifier (in string ). SourceId() Unique identifier of the stream's source, if available. The unique source (or device) identifier is an optional piece of information that, if available, allows that endpoints(such as the recording program) can re-acquire a stream automatically once it is back online. Declaration public string SourceId() Returns Type Description String The Identifier (in string ). Type() Content type of the stream. The content type is a short string such as \"EEG\", \"Gaze\" which describes the content carried by the channel (if known). If a stream contains mixed content this value need not be assigned but may instead be stored in the description of channel types. To be useful to applications and automated processing systems using the recommended content types is preferred. Content types usually follow those pre-defined in https://github.com/sccn/xdf/wiki/Meta-Data (or web search for: XDF meta-data). Declaration public string Type() Returns Type Description String The content type of the stream (in string ). Uid() Unique ID of the stream outlet instance (once assigned). This is a unique identifier of the stream outlet, and is guaranteed to be different across multiple instantiations of the same outlet (e.g., after a re-start). Declaration public string Uid() Returns Type Description String The Unique Identifier (in string ). Version() Protocol version used to deliver the stream. Declaration public int Version() Returns Type Description Int32 The protocol version (in int )."
  },
  "api/LSL4Unity.liblsl.StreamInlet.html": {
    "href": "api/LSL4Unity.liblsl.StreamInlet.html",
    "title": "Class liblsl.StreamInlet | LSL 4 Unity documentation",
    "keywords": "Class liblsl.StreamInlet A stream inlet. Inlets are used to receive streaming data (and meta-data) from the lab network. Inheritance Object liblsl.StreamInlet Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class StreamInlet Constructors StreamInlet(liblsl.StreamInfo, Int32, Int32, Boolean) Initializes a new instance of liblsl.StreamInlet from a resolved stream info. Declaration public StreamInlet(liblsl.StreamInfo info, int maxBuflen = 360, int maxChunklen = 0, bool recover = true) Parameters Type Name Description liblsl.StreamInfo info A resolved stream info object (as coming from one of the resolver functions). Int32 maxBuflen Optionally the maximum amount of data to buffer (in seconds if there is a nominal sampling rate, otherwise x100 in samples). Recording applications want to use a fairly large buffer size here, while real-time applications would only buffer as much as they need to perform their next calculation. Int32 maxChunklen Optionally the maximum size, in samples, at which chunks are transmitted (the default corresponds to the chunk sizes used by the sender). Recording applications can use a generous size here (leaving it to the network how to pack things), while real-time applications may want a finer (perhaps 1-sample) granularity. If left unspecified (=0), the sender determines the chunk granularity. Boolean recover Try to silently recover lost streams that are recoverable (=those that that have a SourceId set). In all other cases (recover is false or the stream is not recoverable) functions may throw a liblsl.LostException if the stream's source is lost (e.g., due to an app or computer crash). Remarks The liblsl.StreamInlet may also be constructed with a fully-specified liblsl.StreamInfo if the desired channel format and count is already known up-front, but this is strongly discouraged and should only ever be done if there is no time to resolve the stream up-front (e.g., due to limitations in the client program). Methods CloseStream() Drop the current data stream. All samples that are still buffered or in flight will be dropped and transmission and buffering of data for this inlet will be stopped. If an application stops being interested in data from a source (temporarily or not) but keeps the outlet alive, it should call CloseStream() to not waste unnecessary system and network resources. Declaration public void CloseStream() Finalize() Finalizes an instance of liblsl.StreamInlet . The inlet will automatically disconnect if destroyed. Declaration protected void Finalize() Info(Double) Retrieve the complete information of the given stream, including the extended description. Can be invoked at any time of the stream's lifetime. Declaration public liblsl.StreamInfo Info(double timeout = 32000000) Parameters Type Name Description Double timeout Optional timeout of the operation (default: no timeout). Returns Type Description liblsl.StreamInfo liblsl.StreamInfo . Exceptions Type Condition TimeoutException If the timeout expires. liblsl.LostException If the stream source has been lost. OpenStream(Double) Subscribe to the data stream. All samples pushed in at the other end from this moment onwards will be queued and eventually be delivered in response to PullSample(Single[], Double) or PullChunk(Single[,], Double[], Double) calls. Pulling a sample without some preceding OpenStream is permitted (the stream will then be opened implicitly). Declaration public void OpenStream(double timeout = 32000000) Parameters Type Name Description Double timeout Optional timeout of the operation (default: no timeout). Exceptions Type Condition TimeoutException If the timeout expires. liblsl.LostException If the stream source has been lost. PullChunk(Char[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(char[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description Char [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullChunk(Double[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(double[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description Double [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullChunk(Int16[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(short[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description Int16 [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullChunk(Int32[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(int[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description Int32 [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullChunk(Single[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(float[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description Single [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullChunk(String[,], Double[], Double) Pull a chunk of data from the inlet. Declaration public int PullChunk(string[, ] buffer, double[] times, double timeout = 0) Parameters Type Name Description String [,] buffer A pre-allocated buffer where the channel data shall be stored. Double [] times A pre-allocated buffer where time stamps shall be stored. Double timeout Optionally the timeout for this operation, if any. When the timeout expires, the function may return before the entire buffer is filled. The default value of 0.0 will retrieve only data available for immediate pickup. Returns Type Description Int32 Number of samples written to the data and timestamp buffers. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(Char[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(char[] sample, double timeout = 32000000) Parameters Type Name Description Char [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(Double[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(double[] sample, double timeout = 32000000) Parameters Type Name Description Double [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(Int16[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(short[] sample, double timeout = 32000000) Parameters Type Name Description Int16 [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(Int32[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(int[] sample, double timeout = 32000000) Parameters Type Name Description Int32 [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(Single[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(float[] sample, double timeout = 32000000) Parameters Type Name Description Single [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. PullSample(String[], Double) Pull a sample from the inlet and read it into an array of values. Handles type checking and conversion. Declaration public double PullSample(string[] sample, double timeout = 32000000) Parameters Type Name Description String [] sample An array to hold the resulting values. Double timeout Optional, the timeout for this operation, if any. Use 0.0 to make the function non-blocking. Returns Type Description Double The capture time of the sample on the remote machine, or 0.0 if no new sample was available. To remap this time stamp to the local clock, add the value returned by TimeCorrection(Double) to it. Exceptions Type Condition liblsl.LostException If the stream source has been lost. SamplesAvailable() Query whether samples are currently available for immediate pickup. Declaration public int SamplesAvailable() Returns Type Description Int32 Number of samples available. Remarks that it is not a good idea to use SamplesAvailable() to determine whether a pull_*() call would block: to be sure, set the pull timeout to 0.0 or an acceptably low value. If the underlying implementation supports it, the value will be the number of samples available (otherwise it will be 1 or 0). SetPostprocessing(liblsl.processing_options_t) Set post-processing flags to use. By default, the inlet performs NO post-processing and returns the ground-truth time stamps, which can then be manually synchronized using TimeCorrection(), and then smoothed/dejittered if desired. This function allows automating these two and possibly more operations. Declaration public void SetPostprocessing(liblsl.processing_options_t flags = liblsl.processing_options_t.post_ALL) Parameters Type Name Description liblsl.processing_options_t flags An integer that is the result of bitwise OR'ing one or more options from liblsl.processing_options_t together (e.g., post_clocksync|post_dejitter); the default is to enable all options. Remarks When you enable this, you will no longer receive or be able to recover the original time stamps. TimeCorrection(Double) Retrieve an estimated time correction offset for the given stream. The first call to this function takes several miliseconds until a reliable first estimate is obtained. Subsequent calls are instantaneous (and rely on periodic background updates). The precision of these estimates should be below 1 ms (empirically within +/-0.2 ms). Declaration public double TimeCorrection(double timeout = 32000000) Parameters Type Name Description Double timeout Optional timeout to acquire the first time-correction estimate (default: no timeout). Returns Type Description Double The time correction estimate. This is the number that needs to be added to a time stamp that was remotely generated via lsl_local_clock() to map it into the local clock domain of this machine. Exceptions Type Condition TimeoutException If the timeout expires. liblsl.LostException If the stream source has been lost. WasClockReset() Query whether the clock was potentially reset since the last call to WasClockReset() . This is a rarely-used function that is only useful to applications that combine multiple TimeCorrection(Double) values to estimate precise clock drift; it allows to tolerate cases where the source machine was hot-swapped or restarted in between two measurements. Declaration public bool WasClockReset() Returns Type Description Boolean true if clock was reset..."
  },
  "api/LSL4Unity.liblsl.StreamOutlet.html": {
    "href": "api/LSL4Unity.liblsl.StreamOutlet.html",
    "title": "Class liblsl.StreamOutlet | LSL 4 Unity documentation",
    "keywords": "Class liblsl.StreamOutlet A stream outlet. Outlets are used to make streaming data (and the meta-data) available on the lab network. Inheritance Object liblsl.StreamOutlet Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class StreamOutlet Constructors StreamOutlet(liblsl.StreamInfo, Int32, Int32) Initializes a new instance of liblsl.StreamOutlet . This makes the stream discoverable. Declaration public StreamOutlet(liblsl.StreamInfo info, int chunkSize = 0, int maxBuffered = 360) Parameters Type Name Description liblsl.StreamInfo info The stream information to use for creating this stream. Stays constant over the lifetime of the outlet. Int32 chunkSize Optionally the desired chunk granularity (in samples) for transmission. If unspecified, each push operation yields one chunk. Inlets can override this setting. Int32 maxBuffered Optionally the maximum amount of data to buffer (in seconds if there is a nominal sampling rate, otherwise x100 in samples). The default is 6 minutes of data. Methods Finalize() Finalizes an instance of the liblsl.StreamOutlet . The stream will no longer be discoverable after destruction and all paired inlets will stop delivering data. Declaration protected void Finalize() HaveConsumers() Check whether consumers are currently registered. While it does not hurt, there is technically no reason to push samples if there is no consumer. Declaration public bool HaveConsumers() Returns Type Description Boolean true or false . Info() Retrieve the stream info provided by this outlet. This is what was used to create the stream (and also has the Additional Network Information fields assigned). Declaration public liblsl.StreamInfo Info() Returns Type Description liblsl.StreamInfo A liblsl.StreamInfo PushChunk(Char[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(char[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Char [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(Char[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(char[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description Char [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushChunk(Double[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(double[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Double [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(Double[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(double[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description Double [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushChunk(Int16[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(short[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Int16 [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(Int16[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(short[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description Int16 [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushChunk(Int32[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(int[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Int32 [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(Int32[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(int[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description Int32 [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushChunk(Single[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(float[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Single [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(Single[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(float[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description Single [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushChunk(String[,], Double, Boolean) Push a chunk of samples into the outlet. Single time provided. Declaration public void PushChunk(string[, ] data, double time = 0, bool pushthrough = true) Parameters Type Name Description String [,] data A rectangular array of values for multiple samples. Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunkSize, if specified at outlet construction, takes precedence over the pushthrough flag. PushChunk(String[,], Double[], Boolean) Push a chunk of multiplexed samples into the outlet. One time per sample is provided. Declaration public void PushChunk(string[, ] data, double[] times, bool pushthrough = true) Parameters Type Name Description String [,] data A rectangular array of values for multiple samples. Double [] times Boolean pushthrough PushSample(Char[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(char[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Char [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. PushSample(Double[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(double[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Double [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. PushSample(Int16[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(short[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Int16 [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. PushSample(Int32[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(int[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Int32 [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. PushSample(Single[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(float[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description Single [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. PushSample(String[], Double, Boolean) Push an array of values as a sample into the outlet. Declaration public void PushSample(string[] data, double time = 0, bool pushthrough = true) Parameters Type Name Description String [] data An array of values to push (one for each channel). Double time Optionally the capture time of the sample, in agreement with LocalClock() ; if omitted, the current time is used. Boolean pushthrough Optionally whether to push the sample through to the receivers instead of buffering it with subsequent samples. Note that the chunk_size, if specified at outlet construction, takes precedence over the pushthrough flag. WaitForConsumers(Double) Wait until some consumer shows up (without wasting resources). Declaration public bool WaitForConsumers(double timeout) Parameters Type Name Description Double timeout The timeout. Returns Type Description Boolean True if the wait was successful, false if the timeout expired."
  },
  "api/LSL4Unity.liblsl.XMLElement.html": {
    "href": "api/LSL4Unity.liblsl.XMLElement.html",
    "title": "Struct liblsl.XMLElement | LSL 4 Unity documentation",
    "keywords": "Struct liblsl.XMLElement A lightweight XML element tree; models the Desc() field of liblsl.StreamInfo . Has a name and can have multiple named children or have text content as value; attributes are omitted. Insider note: The interface is modeled after a subset of pugixml's node type and is compatible with it. Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public struct XMLElement Remarks See Also : http://pugixml.googlecode.com/svn/tags/latest/docs/manual/access.html . Constructors XMLElement(IntPtr) Initializes a new instance of liblsl.XMLElement struct. Declaration public XMLElement(IntPtr handle) Parameters Type Name Description IntPtr handle The handle. Methods AppendChild(String) Append a child element with the specified name. Declaration public liblsl.XMLElement AppendChild(string name) Parameters Type Name Description String name The child name. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . AppendChildValue(String, String) Append a child node with a given name, which has a (nameless) plain-text child with the given text value. Declaration public liblsl.XMLElement AppendChildValue(string name, string value) Parameters Type Name Description String name The child name. String value The child value. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . AppendCopy(liblsl.XMLElement) Append a copy of the specified element as a child. Declaration public liblsl.XMLElement AppendCopy(liblsl.XMLElement e) Parameters Type Name Description liblsl.XMLElement e The element to copy. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . Child(String) Get a child with a specified name. Declaration public liblsl.XMLElement Child(string name) Parameters Type Name Description String name The child name. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . ChildValue() Get child value (value of the first child that is text). Declaration public string ChildValue() Returns Type Description String the child value as string . ChildValue(String) Get child value of a child with a specified name. Declaration public string ChildValue(string name) Parameters Type Name Description String name The child name. Returns Type Description String the child value as string . Empty() Whether this node is empty. Declaration public bool Empty() Returns Type Description Boolean true or false . FirstChild() Get the first child of the element. Declaration public liblsl.XMLElement FirstChild() Returns Type Description liblsl.XMLElement New liblsl.XMLElement . IsText() Whether this is a text body (instead of an XML element). True both for plain char data and CData. Declaration public bool IsText() Returns Type Description Boolean true or false . LastChild() Get the last child of the element. Declaration public liblsl.XMLElement LastChild() Returns Type Description liblsl.XMLElement New liblsl.XMLElement . Name() Name of the element. Declaration public string Name() Returns Type Description String the name as string . NextSibling() Get the next sibling in the children list of the parent node. Declaration public liblsl.XMLElement NextSibling() Returns Type Description liblsl.XMLElement New liblsl.XMLElement . NextSibling(String) Get the next sibling with the specified name. Declaration public liblsl.XMLElement NextSibling(string name) Parameters Type Name Description String name The next sibling name. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . Parent() Get the parent node. Declaration public liblsl.XMLElement Parent() Returns Type Description liblsl.XMLElement New liblsl.XMLElement . PrependChild(String) Prepend a child element with the specified name. Declaration public liblsl.XMLElement PrependChild(string name) Parameters Type Name Description String name The child name. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . PrependChildValue(String, String) Prepend a child node with a given name, which has a (nameless) plain-text child with the given text value. Declaration public liblsl.XMLElement PrependChildValue(string name, string value) Parameters Type Name Description String name The child name. String value The child value. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . PrependCopy(liblsl.XMLElement) Prepend a child element with the specified name. Declaration public liblsl.XMLElement PrependCopy(liblsl.XMLElement e) Parameters Type Name Description liblsl.XMLElement e The element to copy. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . PreviousSibling() Get the previous sibling in the children list of the parent node. Declaration public liblsl.XMLElement PreviousSibling() Returns Type Description liblsl.XMLElement New liblsl.XMLElement . PreviousSibling(String) Get the previous sibling with the specified name. Declaration public liblsl.XMLElement PreviousSibling(string name) Parameters Type Name Description String name The previous sibling name. Returns Type Description liblsl.XMLElement New liblsl.XMLElement . RemoveChild(liblsl.XMLElement) Remove a specified child element. Declaration public void RemoveChild(liblsl.XMLElement e) Parameters Type Name Description liblsl.XMLElement e The element to remove. RemoveChild(String) Remove a child element with the specified name. Declaration public void RemoveChild(string name) Parameters Type Name Description String name The child name. SetChildValue(String, String) Set the text value of the (nameless) plain-text child of a named child node. Declaration public bool SetChildValue(string name, string value) Parameters Type Name Description String name The child name. String value The child value. Returns Type Description Boolean True if the wait was successful, false otherwise. SetName(String) Set the element's name. Declaration public bool SetName(string name) Parameters Type Name Description String name The new name. Returns Type Description Boolean false if the node is empty. SetValue(String) Set the element's value. Declaration public bool SetValue(string value) Parameters Type Name Description String value The new value. Returns Type Description Boolean false if the node is empty. Value() Value of the element. Declaration public string Value() Returns Type Description String the value as string ."
  },
  "api/LSL4Unity.LSLMarkerStream.html": {
    "href": "api/LSL4Unity.LSLMarkerStream.html",
    "title": "Class LSLMarkerStream | LSL 4 Unity documentation",
    "keywords": "Class LSLMarkerStream Inheritance Object LSLMarkerStream Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class LSLMarkerStream : MonoBehaviour Fields streamName Declaration public string streamName Field Value Type Description String streamType Declaration public string streamType Field Value Type Description String Methods Write(String, Double) Declaration public void Write(string marker, double timeStamp = 0) Parameters Type Name Description String marker Double timeStamp WriteBeforeFrameIsDisplayed(String) Declaration public void WriteBeforeFrameIsDisplayed(string marker) Parameters Type Name Description String marker"
  },
  "api/LSL4Unity.LSLOutlet.html": {
    "href": "api/LSL4Unity.LSLOutlet.html",
    "title": "Class LSLOutlet | LSL 4 Unity documentation",
    "keywords": "Class LSLOutlet Inheritance Object LSLOutlet Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class LSLOutlet : MonoBehaviour Fields channelCount Declaration public int channelCount Field Value Type Description Int32 streamName Declaration public string streamName Field Value Type Description String streamType Declaration public string streamType Field Value Type Description String Methods FixedUpdate() Declaration public void FixedUpdate()"
  },
  "api/LSL4Unity.LSLStreamInfoWrapper.html": {
    "href": "api/LSL4Unity.LSLStreamInfoWrapper.html",
    "title": "Class LSLStreamInfoWrapper | LSL 4 Unity documentation",
    "keywords": "Class LSLStreamInfoWrapper Inheritance Object LSLStreamInfoWrapper Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax [Serializable] public class LSLStreamInfoWrapper Constructors LSLStreamInfoWrapper(liblsl.StreamInfo) Declaration public LSLStreamInfoWrapper(liblsl.StreamInfo item) Parameters Type Name Description liblsl.StreamInfo item Fields name Declaration public string name Field Value Type Description String type Declaration public string type Field Value Type Description String Properties ChannelCount Declaration public int ChannelCount { get; } Property Value Type Description Int32 DataRate Declaration public double DataRate { get; } Property Value Type Description Double HostName Declaration public string HostName { get; } Property Value Type Description String Item Declaration public liblsl.StreamInfo Item { get; } Property Value Type Description liblsl.StreamInfo SessionId Declaration public string SessionId { get; } Property Value Type Description String SourceId Declaration public string SourceId { get; } Property Value Type Description String StreamUid Declaration public string StreamUid { get; } Property Value Type Description String StreamVersion Declaration public int StreamVersion { get; } Property Value Type Description Int32"
  },
  "api/LSL4Unity.LSLTimeSync.html": {
    "href": "api/LSL4Unity.LSLTimeSync.html",
    "title": "Class LSLTimeSync | LSL 4 Unity documentation",
    "keywords": "Class LSLTimeSync This singleton should provide an dedicated timestamp for each update call or fixed update LSL sample! So that each sample provided by an Unity3D app has the same timestamp Important! Make sure that the script is called before the default execution order! Inheritance Object LSLTimeSync Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax [ScriptOrder(-1000)] public class LSLTimeSync : MonoBehaviour Properties FixedUpdateTimeStamp Declaration public double FixedUpdateTimeStamp { get; } Property Value Type Description Double Instance Declaration public static LSLTimeSync Instance { get; } Property Value Type Description LSLTimeSync LateUpdateTimeStamp Declaration public double LateUpdateTimeStamp { get; } Property Value Type Description Double UpdateTimeStamp Declaration public double UpdateTimeStamp { get; } Property Value Type Description Double"
  },
  "api/LSL4Unity.LSLTransformOutlet.html": {
    "href": "api/LSL4Unity.LSLTransformOutlet.html",
    "title": "Class LSLTransformOutlet | LSL 4 Unity documentation",
    "keywords": "Class LSLTransformOutlet An reusable example of an outlet which provides the orientation and world position of an entity of an Unity Scene to LSL. Inheritance Object LSLTransformOutlet Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class LSLTransformOutlet : MonoBehaviour Fields position Declaration public bool position Field Value Type Description Boolean rotationAsEuler Declaration public bool rotationAsEuler Field Value Type Description Boolean rotationAsQuaternion Declaration public bool rotationAsQuaternion Field Value Type Description Boolean sampleSource Declaration public Transform sampleSource Field Value Type Description Transform streamName Declaration public string streamName Field Value Type Description String streamType Declaration public string streamType Field Value Type Description String"
  },
  "api/LSL4Unity.LSLUtils.html": {
    "href": "api/LSL4Unity.LSLUtils.html",
    "title": "Class LSLUtils | LSL 4 Unity documentation",
    "keywords": "Class LSLUtils Inheritance Object LSLUtils Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public static class LSLUtils Methods GetSamplingRateFor(MomentForSampling, Boolean) EXPERIMENTAL - Use this to get the sampling rate on which most post processing procedures rely - like importing recorded date as .xdf file to EEGLAB. Declaration public static float GetSamplingRateFor(MomentForSampling moment, bool setRefreshRateToDisplay = true) Parameters Type Name Description MomentForSampling moment Enumeration value for FixedUpdate, Update, LateUpdate ... Boolean setRefreshRateToDisplay Set this to false, if another framerate has been specified manually Returns Type Description Single"
  },
  "api/LSL4Unity.MomentForSampling.html": {
    "href": "api/LSL4Unity.MomentForSampling.html",
    "title": "Enum MomentForSampling | LSL 4 Unity documentation",
    "keywords": "Enum MomentForSampling Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public enum MomentForSampling Fields Name Description FixedUpdate LateUpdate Update"
  },
  "api/LSL4Unity.OV.Constants.html": {
    "href": "api/LSL4Unity.OV.Constants.html",
    "title": "Class Constants | LSL 4 Unity documentation",
    "keywords": "Class Constants Inheritance Object Constants Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public static class Constants Fields TOLERANCE Declaration public const double TOLERANCE = 1E-06 Field Value Type Description Double"
  },
  "api/LSL4Unity.OV.GDFStimulations.html": {
    "href": "api/LSL4Unity.OV.GDFStimulations.html",
    "title": "Class GDFStimulations | LSL 4 Unity documentation",
    "keywords": "Class GDFStimulations List of GDF Stimulations. Inheritance Object GDFStimulations Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public static class GDFStimulations Remarks You can use nameof operator (C# reference) to see the name instead of the value of the staimulation in log or other. Fields GDF_100_WATT Declaration public const int GDF_100_WATT = 1412 Field Value Type Description Int32 GDF_125_WATT Declaration public const int GDF_125_WATT = 1413 Field Value Type Description Int32 GDF_150_WATT Declaration public const int GDF_150_WATT = 1414 Field Value Type Description Int32 GDF_175_WATT Declaration public const int GDF_175_WATT = 1415 Field Value Type Description Int32 GDF_200_WATT Declaration public const int GDF_200_WATT = 1416 Field Value Type Description Int32 GDF_225_WATT Declaration public const int GDF_225_WATT = 1417 Field Value Type Description Int32 GDF_25_WATT Declaration public const int GDF_25_WATT = 1409 Field Value Type Description Int32 GDF_250_WATT Declaration public const int GDF_250_WATT = 1418 Field Value Type Description Int32 GDF_275_WATT Declaration public const int GDF_275_WATT = 1419 Field Value Type Description Int32 GDF_300_WATT Declaration public const int GDF_300_WATT = 1420 Field Value Type Description Int32 GDF_325_WATT Declaration public const int GDF_325_WATT = 1421 Field Value Type Description Int32 GDF_350_WATT Declaration public const int GDF_350_WATT = 1422 Field Value Type Description Int32 GDF_50_WATT Declaration public const int GDF_50_WATT = 1410 Field Value Type Description Int32 GDF_75_WATT Declaration public const int GDF_75_WATT = 1411 Field Value Type Description Int32 GDF_AEP Declaration public const int GDF_AEP = 290 Field Value Type Description Int32 GDF_ARM_MOVEMENT Declaration public const int GDF_ARM_MOVEMENT = 1097 Field Value Type Description Int32 GDF_ARM_RIGHT_MOVEMENT Declaration public const int GDF_ARM_RIGHT_MOVEMENT = 1098 Field Value Type Description Int32 GDF_ARTIFACT_50_60_HZ_INTERFERENCE Declaration public const int GDF_ARTIFACT_50_60_HZ_INTERFERENCE = 263 Field Value Type Description Int32 GDF_ARTIFACT_BREATHING Declaration public const int GDF_ARTIFACT_BREATHING = 264 Field Value Type Description Int32 GDF_ARTIFACT_ECG Declaration public const int GDF_ARTIFACT_ECG = 258 Field Value Type Description Int32 GDF_ARTIFACT_EMG Declaration public const int GDF_ARTIFACT_EMG = 259 Field Value Type Description Int32 GDF_ARTIFACT_EOG_LARGE Declaration public const int GDF_ARTIFACT_EOG_LARGE = 257 Field Value Type Description Int32 GDF_ARTIFACT_EOG_SMALL Declaration public const int GDF_ARTIFACT_EOG_SMALL = 266 Field Value Type Description Int32 GDF_ARTIFACT_FAILING_ELECTRODE Declaration public const int GDF_ARTIFACT_FAILING_ELECTRODE = 261 Field Value Type Description Int32 GDF_ARTIFACT_MOVEMENT Declaration public const int GDF_ARTIFACT_MOVEMENT = 260 Field Value Type Description Int32 GDF_ARTIFACT_PULSE Declaration public const int GDF_ARTIFACT_PULSE = 265 Field Value Type Description Int32 GDF_ARTIFACT_SWEAT Declaration public const int GDF_ARTIFACT_SWEAT = 262 Field Value Type Description Int32 GDF_BEEP Declaration public const int GDF_BEEP = 785 Field Value Type Description Int32 GDF_BITING Declaration public const int GDF_BITING = 1094 Field Value Type Description Int32 GDF_CAHE Declaration public const int GDF_CAHE = 1027 Field Value Type Description Int32 GDF_CALIBRATION Declaration public const int GDF_CALIBRATION = 271 Field Value Type Description Int32 GDF_CLASS10 Declaration public const int GDF_CLASS10 = 778 Field Value Type Description Int32 GDF_CLASS11 Declaration public const int GDF_CLASS11 = 779 Field Value Type Description Int32 GDF_CLASS5 Declaration public const int GDF_CLASS5 = 773 Field Value Type Description Int32 GDF_CLASS7 Declaration public const int GDF_CLASS7 = 775 Field Value Type Description Int32 GDF_CLASS8 Declaration public const int GDF_CLASS8 = 776 Field Value Type Description Int32 GDF_CLASS9 Declaration public const int GDF_CLASS9 = 777 Field Value Type Description Int32 GDF_CORRECT Declaration public const int GDF_CORRECT = 897 Field Value Type Description Int32 GDF_CROSS_ON_SCREEN Declaration public const int GDF_CROSS_ON_SCREEN = 786 Field Value Type Description Int32 GDF_CSB Declaration public const int GDF_CSB = 1028 Field Value Type Description Int32 GDF_CUE_UNKNOWN_UNDEFINED Declaration public const int GDF_CUE_UNKNOWN_UNDEFINED = 783 Field Value Type Description Int32 GDF_DOWN Declaration public const int GDF_DOWN = 774 Field Value Type Description Int32 GDF_ECG_FIDUCIAL_POINT_QRS_COMPLEX Declaration public const int GDF_ECG_FIDUCIAL_POINT_QRS_COMPLEX = 1281 Field Value Type Description Int32 GDF_ECG_P_WAVE Declaration public const int GDF_ECG_P_WAVE = 1282 Field Value Type Description Int32 GDF_ECG_QRS_COMPLEX Declaration public const int GDF_ECG_QRS_COMPLEX = 1283 Field Value Type Description Int32 GDF_ECG_R_POINT Declaration public const int GDF_ECG_R_POINT = 1284 Field Value Type Description Int32 GDF_ECG_T_WAVE Declaration public const int GDF_ECG_T_WAVE = 1286 Field Value Type Description Int32 GDF_ECG_U_WAVE Declaration public const int GDF_ECG_U_WAVE = 1287 Field Value Type Description Int32 GDF_EEG_IDLING_EEG_EYES_CLOSED Declaration public const int GDF_EEG_IDLING_EEG_EYES_CLOSED = 277 Field Value Type Description Int32 GDF_EEG_IDLING_EEG_EYES_OPEN Declaration public const int GDF_EEG_IDLING_EEG_EYES_OPEN = 276 Field Value Type Description Int32 GDF_EEG_K_COMPLEXES Declaration public const int GDF_EEG_K_COMPLEXES = 274 Field Value Type Description Int32 GDF_EEG_SAW_TOOTH_WAVES Declaration public const int GDF_EEG_SAW_TOOTH_WAVES = 275 Field Value Type Description Int32 GDF_EEG_SEIZURE Declaration public const int GDF_EEG_SEIZURE = 279 Field Value Type Description Int32 GDF_EEG_SLEEP_SPLINDLES Declaration public const int GDF_EEG_SLEEP_SPLINDLES = 273 Field Value Type Description Int32 GDF_EEG_SPIKE Declaration public const int GDF_EEG_SPIKE = 278 Field Value Type Description Int32 GDF_END_OF_SESSION Declaration public const int GDF_END_OF_SESSION = 1010 Field Value Type Description Int32 GDF_END_OF_TRIAL Declaration public const int GDF_END_OF_TRIAL = 800 Field Value Type Description Int32 GDF_EYE_BLINK Declaration public const int GDF_EYE_BLINK = 1081 Field Value Type Description Int32 GDF_EYES_DOWN Declaration public const int GDF_EYES_DOWN = 1076 Field Value Type Description Int32 GDF_EYES_LEFT Declaration public const int GDF_EYES_LEFT = 1073 Field Value Type Description Int32 GDF_EYES_RIGHT Declaration public const int GDF_EYES_RIGHT = 1074 Field Value Type Description Int32 GDF_EYES_UP Declaration public const int GDF_EYES_UP = 1075 Field Value Type Description Int32 GDF_FEEDBACK_CONTINUOUS Declaration public const int GDF_FEEDBACK_CONTINUOUS = 781 Field Value Type Description Int32 GDF_FEEDBACK_DISCRETE Declaration public const int GDF_FEEDBACK_DISCRETE = 782 Field Value Type Description Int32 GDF_FLASHING_LIGHT Declaration public const int GDF_FLASHING_LIGHT = 787 Field Value Type Description Int32 GDF_FOOT Declaration public const int GDF_FOOT = 771 Field Value Type Description Int32 GDF_FOOT_MOVEMENT Declaration public const int GDF_FOOT_MOVEMENT = 1095 Field Value Type Description Int32 GDF_FOOT_RIGHT_MOVEMENT Declaration public const int GDF_FOOT_RIGHT_MOVEMENT = 1096 Field Value Type Description Int32 GDF_HEAD_MOVEMENT Declaration public const int GDF_HEAD_MOVEMENT = 1091 Field Value Type Description Int32 GDF_HORIZONTAL_EYE_MOVEMENT Declaration public const int GDF_HORIZONTAL_EYE_MOVEMENT = 1077 Field Value Type Description Int32 GDF_INCORRECT Declaration public const int GDF_INCORRECT = 898 Field Value Type Description Int32 GDF_LEFT Declaration public const int GDF_LEFT = 769 Field Value Type Description Int32 GDF_LEFT_HAND_MOVEMENT Declaration public const int GDF_LEFT_HAND_MOVEMENT = 1089 Field Value Type Description Int32 GDF_LIGHTS_ON Declaration public const int GDF_LIGHTS_ON = 1056 Field Value Type Description Int32 GDF_MAXIMUM_INSPIRATION Declaration public const int GDF_MAXIMUM_INSPIRATION = 1038 Field Value Type Description Int32 GDF_NON_EQUIDISTANT_SAMPLING_VALUE Declaration public const int GDF_NON_EQUIDISTANT_SAMPLING_VALUE = 32767 Field Value Type Description Int32 GDF_OAHE Declaration public const int GDF_OAHE = 1025 Field Value Type Description Int32 GDF_REJECTION Declaration public const int GDF_REJECTION = 1023 Field Value Type Description Int32 GDF_REM Declaration public const int GDF_REM = 1045 Field Value Type Description Int32 GDF_RERA Declaration public const int GDF_RERA = 1026 Field Value Type Description Int32 GDF_RIGHT Declaration public const int GDF_RIGHT = 770 Field Value Type Description Int32 GDF_RIGHT_HAND_MOVEMENT Declaration public const int GDF_RIGHT_HAND_MOVEMENT = 1090 Field Value Type Description Int32 GDF_ROTATION_CLOCKWISE Declaration public const int GDF_ROTATION_CLOCKWISE = 1079 Field Value Type Description Int32 GDF_ROTATION_COUNTERCLOCKWISE Declaration public const int GDF_ROTATION_COUNTERCLOCKWISE = 1080 Field Value Type Description Int32 GDF_SEP Declaration public const int GDF_SEP = 291 Field Value Type Description Int32 GDF_SLEEP_HYPOVENTILATION Declaration public const int GDF_SLEEP_HYPOVENTILATION = 1029 Field Value Type Description Int32 GDF_SSAEP Declaration public const int GDF_SSAEP = 306 Field Value Type Description Int32 GDF_SSSEP Declaration public const int GDF_SSSEP = 307 Field Value Type Description Int32 GDF_SSVEP Declaration public const int GDF_SSVEP = 305 Field Value Type Description Int32 GDF_STAGE_1 Declaration public const int GDF_STAGE_1 = 1041 Field Value Type Description Int32 GDF_STAGE_2 Declaration public const int GDF_STAGE_2 = 1042 Field Value Type Description Int32 GDF_STAGE_3 Declaration public const int GDF_STAGE_3 = 1043 Field Value Type Description Int32 GDF_STAGE_4 Declaration public const int GDF_STAGE_4 = 1044 Field Value Type Description Int32 GDF_START Declaration public const int GDF_START = 1408 Field Value Type Description Int32 GDF_START_OF_INSPIRATION Declaration public const int GDF_START_OF_INSPIRATION = 1039 Field Value Type Description Int32 GDF_START_OF_NEW_SEGMENT Declaration public const int GDF_START_OF_NEW_SEGMENT = 32766 Field Value Type Description Int32 GDF_START_OF_TRIAL Declaration public const int GDF_START_OF_TRIAL = 768 Field Value Type Description Int32 GDF_SWALLOWING Declaration public const int GDF_SWALLOWING = 1093 Field Value Type Description Int32 GDF_TMS Declaration public const int GDF_TMS = 303 Field Value Type Description Int32 GDF_TONGUE Declaration public const int GDF_TONGUE = 772 Field Value Type Description Int32 GDF_TONGUE_MOVEMENT Declaration public const int GDF_TONGUE_MOVEMENT = 1092 Field Value Type Description Int32 GDF_UP Declaration public const int GDF_UP = 780 Field Value Type Description Int32 GDF_VEP Declaration public const int GDF_VEP = 289 Field Value Type Description Int32 GDF_VERTICAL_EYE_MOVEMENT Declaration public const int GDF_VERTICAL_EYE_MOVEMENT = 1078 Field Value Type Description Int32 GDF_WAKE Declaration public const int GDF_WAKE = 1040 Field Value Type Description Int32"
  },
  "api/LSL4Unity.OV.html": {
    "href": "api/LSL4Unity.OV.html",
    "title": "Namespace LSL4Unity.OV | LSL 4 Unity documentation",
    "keywords": "Namespace LSL4Unity.OV Classes Constants GDFStimulations List of GDF Stimulations. OVDoubleInlet Double Inlet for OpenViBE Link. OVDoubleOutlet Double Inlet for OpenViBE Link. OVFloatInlet Float Inlet for OpenViBE Link. OVFloatOutlet Float Inlet for OpenViBE Link. OVInlet<T> Base Inlet for OpenViBE Link. OVIntInlet Int Inlet for OpenViBE Link. OVIntOutlet Int Inlet for OpenViBE Link. OVOutlet<T> Base Inlet for OpenViBE Link. Stimulations List of OpenViBE Stimulations. Enums OVOutlet<T>.StreamTypes"
  },
  "api/LSL4Unity.OV.OVDoubleInlet.html": {
    "href": "api/LSL4Unity.OV.OVDoubleInlet.html",
    "title": "Class OVDoubleInlet | LSL 4 Unity documentation",
    "keywords": "Class OVDoubleInlet Double Inlet for OpenViBE Link. Inheritance Object OVInlet < Double > OVDoubleInlet DoubleInlet MatrixInlet Inherited Members OVInlet<Double>.StreamName OVInlet<Double>.inlet OVInlet<Double>.expectedChannels OVInlet<Double>.samples OVInlet<Double>.ForceUpdate() OVInlet<Double>.Process(Double[], Double) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVDoubleInlet : OVInlet<double> Methods PullSamples() Pull the samples. Declaration protected override void PullSamples() Overrides LSL4Unity.OV.OVInlet<System.Double>.PullSamples() See Also OVInlet <T>"
  },
  "api/LSL4Unity.OV.OVDoubleOutlet.html": {
    "href": "api/LSL4Unity.OV.OVDoubleOutlet.html",
    "title": "Class OVDoubleOutlet | LSL 4 Unity documentation",
    "keywords": "Class OVDoubleOutlet Double Inlet for OpenViBE Link. Inheritance Object OVOutlet < Double > OVDoubleOutlet Inherited Members OVOutlet<Double>.StreamName OVOutlet<Double>.ChannelCount OVOutlet<Double>.outlet OVOutlet<Double>.info OVOutlet<Double>.samples OVOutlet<Double>.streamType OVOutlet<Double>.ForceUpdate(Double[]) OVOutlet<Double>.Process(Double[]) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVDoubleOutlet : OVOutlet<double> Constructors OVDoubleOutlet() Declaration protected OVDoubleOutlet() Methods PushSamples() Push the samples. Declaration protected override void PushSamples() Overrides LSL4Unity.OV.OVOutlet<System.Double>.PushSamples() See Also OVOutlet <T>"
  },
  "api/LSL4Unity.OV.OVFloatInlet.html": {
    "href": "api/LSL4Unity.OV.OVFloatInlet.html",
    "title": "Class OVFloatInlet | LSL 4 Unity documentation",
    "keywords": "Class OVFloatInlet Float Inlet for OpenViBE Link. Inheritance Object OVInlet < Single > OVFloatInlet FloatInlet Inherited Members OVInlet<Single>.StreamName OVInlet<Single>.inlet OVInlet<Single>.expectedChannels OVInlet<Single>.samples OVInlet<Single>.ForceUpdate() OVInlet<Single>.Process(Single[], Double) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVFloatInlet : OVInlet<float> Methods PullSamples() Pull the samples. Declaration protected override void PullSamples() Overrides LSL4Unity.OV.OVInlet<System.Single>.PullSamples() See Also OVInlet <T>"
  },
  "api/LSL4Unity.OV.OVFloatOutlet.html": {
    "href": "api/LSL4Unity.OV.OVFloatOutlet.html",
    "title": "Class OVFloatOutlet | LSL 4 Unity documentation",
    "keywords": "Class OVFloatOutlet Float Inlet for OpenViBE Link. Inheritance Object OVOutlet < Single > OVFloatOutlet Inherited Members OVOutlet<Single>.StreamName OVOutlet<Single>.ChannelCount OVOutlet<Single>.outlet OVOutlet<Single>.info OVOutlet<Single>.samples OVOutlet<Single>.streamType OVOutlet<Single>.ForceUpdate(Single[]) OVOutlet<Single>.Process(Single[]) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVFloatOutlet : OVOutlet<float> Constructors OVFloatOutlet() Declaration protected OVFloatOutlet() Methods PushSamples() Push the samples. Declaration protected override void PushSamples() Overrides LSL4Unity.OV.OVOutlet<System.Single>.PushSamples() See Also OVOutlet <T>"
  },
  "api/LSL4Unity.OV.OVInlet-1.html": {
    "href": "api/LSL4Unity.OV.OVInlet-1.html",
    "title": "Class OVInlet<T> | LSL 4 Unity documentation",
    "keywords": "Class OVInlet<T> Base Inlet for OpenViBE Link. Inheritance Object OVInlet<T> OVDoubleInlet OVFloatInlet OVIntInlet Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVInlet<T> : MonoBehaviour Type Parameters Name Description T Fields expectedChannels Declaration protected int expectedChannels Field Value Type Description Int32 inlet Declaration protected liblsl.StreamInlet inlet Field Value Type Description liblsl.StreamInlet samples Declaration protected T[] samples Field Value Type Description T[] Properties StreamName Declaration public string StreamName { get; } Property Value Type Description String Methods ForceUpdate() ForceUpdate is called when it's needed. Declaration public void ForceUpdate() Process(T[], Double) Override this method in the subclass to specify what should happen when samples are available. Declaration protected abstract void Process(T[] input, double time) Parameters Type Name Description T[] input The Incomming Sample. Double time The current Time. PullSamples() Pull the samples. Declaration protected abstract void PullSamples()"
  },
  "api/LSL4Unity.OV.OVIntInlet.html": {
    "href": "api/LSL4Unity.OV.OVIntInlet.html",
    "title": "Class OVIntInlet | LSL 4 Unity documentation",
    "keywords": "Class OVIntInlet Int Inlet for OpenViBE Link. Inheritance Object OVInlet < Int32 > OVIntInlet StimulationInlet Inherited Members OVInlet<Int32>.StreamName OVInlet<Int32>.inlet OVInlet<Int32>.expectedChannels OVInlet<Int32>.samples OVInlet<Int32>.ForceUpdate() OVInlet<Int32>.Process(Int32[], Double) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVIntInlet : OVInlet<int> Methods PullSamples() Pull the samples. Declaration protected override void PullSamples() Overrides LSL4Unity.OV.OVInlet<System.Int32>.PullSamples() See Also OVInlet <T>"
  },
  "api/LSL4Unity.OV.OVIntOutlet.html": {
    "href": "api/LSL4Unity.OV.OVIntOutlet.html",
    "title": "Class OVIntOutlet | LSL 4 Unity documentation",
    "keywords": "Class OVIntOutlet Int Inlet for OpenViBE Link. Inheritance Object OVOutlet < Int32 > OVIntOutlet StimulationOutlet Inherited Members OVOutlet<Int32>.StreamName OVOutlet<Int32>.ChannelCount OVOutlet<Int32>.outlet OVOutlet<Int32>.info OVOutlet<Int32>.samples OVOutlet<Int32>.streamType OVOutlet<Int32>.ForceUpdate(Int32[]) OVOutlet<Int32>.Process(Int32[]) Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVIntOutlet : OVOutlet<int> Constructors OVIntOutlet() Declaration protected OVIntOutlet() Methods PushSamples() Push the samples. Declaration protected override void PushSamples() Overrides LSL4Unity.OV.OVOutlet<System.Int32>.PushSamples() See Also OVOutlet <T>"
  },
  "api/LSL4Unity.OV.OVOutlet-1.html": {
    "href": "api/LSL4Unity.OV.OVOutlet-1.html",
    "title": "Class OVOutlet<T> | LSL 4 Unity documentation",
    "keywords": "Class OVOutlet<T> Base Inlet for OpenViBE Link. Inheritance Object OVOutlet<T> OVDoubleOutlet OVFloatOutlet OVIntOutlet Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public abstract class OVOutlet<T> : MonoBehaviour Type Parameters Name Description T Fields info Declaration protected liblsl.StreamInfo info Field Value Type Description liblsl.StreamInfo outlet Declaration protected liblsl.StreamOutlet outlet Field Value Type Description liblsl.StreamOutlet samples Declaration protected T[] samples Field Value Type Description T[] streamType Declaration protected OVOutlet<T>.StreamTypes streamType Field Value Type Description OVOutlet.StreamTypes <> Properties ChannelCount Declaration public int ChannelCount { get; } Property Value Type Description Int32 StreamName Declaration public string StreamName { get; } Property Value Type Description String Methods ForceUpdate(T[]) ForceUpdate is called when it's needed. Declaration public void ForceUpdate(T[] input) Parameters Type Name Description T[] input The samples to push. Process(T[]) Override this method in the subclass to specify what should happen when samples are available. Declaration protected abstract void Process(T[] input) Parameters Type Name Description T[] input The Incomming Sample. PushSamples() Push the samples. Declaration protected abstract void PushSamples()"
  },
  "api/LSL4Unity.OV.OVOutlet-1.StreamTypes.html": {
    "href": "api/LSL4Unity.OV.OVOutlet-1.StreamTypes.html",
    "title": "Enum OVOutlet<T>.StreamTypes | LSL 4 Unity documentation",
    "keywords": "Enum OVOutlet<T>.StreamTypes Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax protected enum StreamTypes Fields Name Description Double Float Int"
  },
  "api/LSL4Unity.OV.Stimulations.html": {
    "href": "api/LSL4Unity.OV.Stimulations.html",
    "title": "Class Stimulations | LSL 4 Unity documentation",
    "keywords": "Class Stimulations List of OpenViBE Stimulations. Inheritance Object Stimulations Namespace : LSL4Unity.OV Assembly : cs.temp.dll.dll Syntax public static class Stimulations Remarks You can use nameof operator (C# reference) to see the name instead of the value of the staimulation in log or other. Fields ADDED_SAMPLES_BEGIN Declaration public const int ADDED_SAMPLES_BEGIN = 33553 Field Value Type Description Int32 ADDED_SAMPLES_END Declaration public const int ADDED_SAMPLES_END = 33554 Field Value Type Description Int32 ARTIFACT Declaration public const int ARTIFACT = 33538 Field Value Type Description Int32 BASELINE_START Declaration public const int BASELINE_START = 32775 Field Value Type Description Int32 BASELINE_STOP Declaration public const int BASELINE_STOP = 32776 Field Value Type Description Int32 BEEP Declaration public const int BEEP = 33282 Field Value Type Description Int32 BUTTON1_PRESSED Declaration public const int BUTTON1_PRESSED = 32786 Field Value Type Description Int32 BUTTON1_RELEASED Declaration public const int BUTTON1_RELEASED = 32787 Field Value Type Description Int32 BUTTON2_PRESSED Declaration public const int BUTTON2_PRESSED = 32788 Field Value Type Description Int32 BUTTON2_RELEASED Declaration public const int BUTTON2_RELEASED = 32789 Field Value Type Description Int32 BUTTON3_PRESSED Declaration public const int BUTTON3_PRESSED = 32790 Field Value Type Description Int32 BUTTON3_RELEASED Declaration public const int BUTTON3_RELEASED = 32791 Field Value Type Description Int32 BUTTON4_PRESSED Declaration public const int BUTTON4_PRESSED = 32792 Field Value Type Description Int32 BUTTON4_RELEASED Declaration public const int BUTTON4_RELEASED = 32793 Field Value Type Description Int32 DOUBLE_BEEP Declaration public const int DOUBLE_BEEP = 33283 Field Value Type Description Int32 END_OF_FILE Declaration public const int END_OF_FILE = 33284 Field Value Type Description Int32 EXPERIMENT_START Declaration public const int EXPERIMENT_START = 32769 Field Value Type Description Int32 EXPERIMENT_STOP Declaration public const int EXPERIMENT_STOP = 32770 Field Value Type Description Int32 GDF_LIGHTS_OFF Declaration public const int GDF_LIGHTS_OFF = 33824 Field Value Type Description Int32 LABEL_00 Declaration public const int LABEL_00 = 33024 Field Value Type Description Int32 LABEL_01 Declaration public const int LABEL_01 = 33025 Field Value Type Description Int32 LABEL_02 Declaration public const int LABEL_02 = 33026 Field Value Type Description Int32 LABEL_03 Declaration public const int LABEL_03 = 33027 Field Value Type Description Int32 LABEL_04 Declaration public const int LABEL_04 = 33028 Field Value Type Description Int32 LABEL_05 Declaration public const int LABEL_05 = 33029 Field Value Type Description Int32 LABEL_06 Declaration public const int LABEL_06 = 33030 Field Value Type Description Int32 LABEL_07 Declaration public const int LABEL_07 = 33031 Field Value Type Description Int32 LABEL_08 Declaration public const int LABEL_08 = 33032 Field Value Type Description Int32 LABEL_09 Declaration public const int LABEL_09 = 33033 Field Value Type Description Int32 LABEL_10 Declaration public const int LABEL_10 = 33040 Field Value Type Description Int32 LABEL_11 Declaration public const int LABEL_11 = 33041 Field Value Type Description Int32 LABEL_12 Declaration public const int LABEL_12 = 33042 Field Value Type Description Int32 LABEL_13 Declaration public const int LABEL_13 = 33043 Field Value Type Description Int32 LABEL_14 Declaration public const int LABEL_14 = 33044 Field Value Type Description Int32 LABEL_15 Declaration public const int LABEL_15 = 33045 Field Value Type Description Int32 LABEL_16 Declaration public const int LABEL_16 = 33046 Field Value Type Description Int32 LABEL_17 Declaration public const int LABEL_17 = 33047 Field Value Type Description Int32 LABEL_18 Declaration public const int LABEL_18 = 33048 Field Value Type Description Int32 LABEL_19 Declaration public const int LABEL_19 = 33049 Field Value Type Description Int32 LABEL_20 Declaration public const int LABEL_20 = 33056 Field Value Type Description Int32 LABEL_21 Declaration public const int LABEL_21 = 33057 Field Value Type Description Int32 LABEL_22 Declaration public const int LABEL_22 = 33058 Field Value Type Description Int32 LABEL_23 Declaration public const int LABEL_23 = 33059 Field Value Type Description Int32 LABEL_24 Declaration public const int LABEL_24 = 33060 Field Value Type Description Int32 LABEL_25 Declaration public const int LABEL_25 = 33061 Field Value Type Description Int32 LABEL_26 Declaration public const int LABEL_26 = 33062 Field Value Type Description Int32 LABEL_27 Declaration public const int LABEL_27 = 33063 Field Value Type Description Int32 LABEL_28 Declaration public const int LABEL_28 = 33064 Field Value Type Description Int32 LABEL_29 Declaration public const int LABEL_29 = 33065 Field Value Type Description Int32 LABEL_30 Declaration public const int LABEL_30 = 33072 Field Value Type Description Int32 LABEL_31 Declaration public const int LABEL_31 = 33073 Field Value Type Description Int32 LABEL_32 Declaration public const int LABEL_32 = 33074 Field Value Type Description Int32 LABEL_33 Declaration public const int LABEL_33 = 33075 Field Value Type Description Int32 LABEL_34 Declaration public const int LABEL_34 = 33076 Field Value Type Description Int32 LABEL_35 Declaration public const int LABEL_35 = 33077 Field Value Type Description Int32 LABEL_36 Declaration public const int LABEL_36 = 33078 Field Value Type Description Int32 LABEL_37 Declaration public const int LABEL_37 = 33079 Field Value Type Description Int32 LABEL_38 Declaration public const int LABEL_38 = 33080 Field Value Type Description Int32 LABEL_39 Declaration public const int LABEL_39 = 33081 Field Value Type Description Int32 LABEL_40 Declaration public const int LABEL_40 = 33088 Field Value Type Description Int32 LABEL_41 Declaration public const int LABEL_41 = 33089 Field Value Type Description Int32 LABEL_42 Declaration public const int LABEL_42 = 33090 Field Value Type Description Int32 LABEL_43 Declaration public const int LABEL_43 = 33091 Field Value Type Description Int32 LABEL_44 Declaration public const int LABEL_44 = 33092 Field Value Type Description Int32 LABEL_45 Declaration public const int LABEL_45 = 33093 Field Value Type Description Int32 LABEL_46 Declaration public const int LABEL_46 = 33094 Field Value Type Description Int32 LABEL_47 Declaration public const int LABEL_47 = 33095 Field Value Type Description Int32 LABEL_48 Declaration public const int LABEL_48 = 33096 Field Value Type Description Int32 LABEL_49 Declaration public const int LABEL_49 = 33097 Field Value Type Description Int32 LABEL_50 Declaration public const int LABEL_50 = 33104 Field Value Type Description Int32 LABEL_51 Declaration public const int LABEL_51 = 33105 Field Value Type Description Int32 LABEL_52 Declaration public const int LABEL_52 = 33106 Field Value Type Description Int32 LABEL_53 Declaration public const int LABEL_53 = 33107 Field Value Type Description Int32 LABEL_54 Declaration public const int LABEL_54 = 33108 Field Value Type Description Int32 LABEL_55 Declaration public const int LABEL_55 = 33109 Field Value Type Description Int32 LABEL_56 Declaration public const int LABEL_56 = 33110 Field Value Type Description Int32 LABEL_57 Declaration public const int LABEL_57 = 33111 Field Value Type Description Int32 LABEL_58 Declaration public const int LABEL_58 = 33112 Field Value Type Description Int32 LABEL_59 Declaration public const int LABEL_59 = 33113 Field Value Type Description Int32 LABEL_60 Declaration public const int LABEL_60 = 33120 Field Value Type Description Int32 LABEL_61 Declaration public const int LABEL_61 = 33121 Field Value Type Description Int32 LABEL_62 Declaration public const int LABEL_62 = 33122 Field Value Type Description Int32 LABEL_63 Declaration public const int LABEL_63 = 33123 Field Value Type Description Int32 LABEL_64 Declaration public const int LABEL_64 = 33124 Field Value Type Description Int32 LABEL_65 Declaration public const int LABEL_65 = 33125 Field Value Type Description Int32 LABEL_66 Declaration public const int LABEL_66 = 33126 Field Value Type Description Int32 LABEL_67 Declaration public const int LABEL_67 = 33127 Field Value Type Description Int32 LABEL_68 Declaration public const int LABEL_68 = 33128 Field Value Type Description Int32 LABEL_69 Declaration public const int LABEL_69 = 33129 Field Value Type Description Int32 LABEL_70 Declaration public const int LABEL_70 = 33136 Field Value Type Description Int32 LABEL_71 Declaration public const int LABEL_71 = 33137 Field Value Type Description Int32 LABEL_72 Declaration public const int LABEL_72 = 33138 Field Value Type Description Int32 LABEL_73 Declaration public const int LABEL_73 = 33139 Field Value Type Description Int32 LABEL_74 Declaration public const int LABEL_74 = 33140 Field Value Type Description Int32 LABEL_75 Declaration public const int LABEL_75 = 33141 Field Value Type Description Int32 LABEL_76 Declaration public const int LABEL_76 = 33142 Field Value Type Description Int32 LABEL_77 Declaration public const int LABEL_77 = 33143 Field Value Type Description Int32 LABEL_78 Declaration public const int LABEL_78 = 33144 Field Value Type Description Int32 LABEL_79 Declaration public const int LABEL_79 = 33145 Field Value Type Description Int32 LABEL_80 Declaration public const int LABEL_80 = 33152 Field Value Type Description Int32 LABEL_81 Declaration public const int LABEL_81 = 33153 Field Value Type Description Int32 LABEL_82 Declaration public const int LABEL_82 = 33154 Field Value Type Description Int32 LABEL_83 Declaration public const int LABEL_83 = 33155 Field Value Type Description Int32 LABEL_84 Declaration public const int LABEL_84 = 33156 Field Value Type Description Int32 LABEL_85 Declaration public const int LABEL_85 = 33157 Field Value Type Description Int32 LABEL_86 Declaration public const int LABEL_86 = 33158 Field Value Type Description Int32 LABEL_87 Declaration public const int LABEL_87 = 33159 Field Value Type Description Int32 LABEL_88 Declaration public const int LABEL_88 = 33160 Field Value Type Description Int32 LABEL_89 Declaration public const int LABEL_89 = 33161 Field Value Type Description Int32 LABEL_90 Declaration public const int LABEL_90 = 33168 Field Value Type Description Int32 LABEL_91 Declaration public const int LABEL_91 = 33169 Field Value Type Description Int32 LABEL_92 Declaration public const int LABEL_92 = 33170 Field Value Type Description Int32 LABEL_93 Declaration public const int LABEL_93 = 33171 Field Value Type Description Int32 LABEL_94 Declaration public const int LABEL_94 = 33172 Field Value Type Description Int32 LABEL_95 Declaration public const int LABEL_95 = 33173 Field Value Type Description Int32 LABEL_96 Declaration public const int LABEL_96 = 33174 Field Value Type Description Int32 LABEL_97 Declaration public const int LABEL_97 = 33175 Field Value Type Description Int32 LABEL_98 Declaration public const int LABEL_98 = 33176 Field Value Type Description Int32 LABEL_99 Declaration public const int LABEL_99 = 33177 Field Value Type Description Int32 NO_ARTIFACT Declaration public const int NO_ARTIFACT = 33537 Field Value Type Description Int32 NON_TARGET Declaration public const int NON_TARGET = 33286 Field Value Type Description Int32 NUMBER_00 Declaration public const int NUMBER_00 = 0 Field Value Type Description Int32 NUMBER_01 Declaration public const int NUMBER_01 = 1 Field Value Type Description Int32 NUMBER_02 Declaration public const int NUMBER_02 = 2 Field Value Type Description Int32 NUMBER_03 Declaration public const int NUMBER_03 = 3 Field Value Type Description Int32 NUMBER_04 Declaration public const int NUMBER_04 = 4 Field Value Type Description Int32 NUMBER_05 Declaration public const int NUMBER_05 = 5 Field Value Type Description Int32 NUMBER_06 Declaration public const int NUMBER_06 = 6 Field Value Type Description Int32 NUMBER_07 Declaration public const int NUMBER_07 = 7 Field Value Type Description Int32 NUMBER_08 Declaration public const int NUMBER_08 = 8 Field Value Type Description Int32 NUMBER_09 Declaration public const int NUMBER_09 = 9 Field Value Type Description Int32 NUMBER_10 Declaration public const int NUMBER_10 = 16 Field Value Type Description Int32 NUMBER_11 Declaration public const int NUMBER_11 = 17 Field Value Type Description Int32 NUMBER_12 Declaration public const int NUMBER_12 = 18 Field Value Type Description Int32 NUMBER_13 Declaration public const int NUMBER_13 = 19 Field Value Type Description Int32 NUMBER_14 Declaration public const int NUMBER_14 = 20 Field Value Type Description Int32 NUMBER_15 Declaration public const int NUMBER_15 = 21 Field Value Type Description Int32 NUMBER_16 Declaration public const int NUMBER_16 = 22 Field Value Type Description Int32 NUMBER_17 Declaration public const int NUMBER_17 = 23 Field Value Type Description Int32 NUMBER_18 Declaration public const int NUMBER_18 = 24 Field Value Type Description Int32 NUMBER_19 Declaration public const int NUMBER_19 = 25 Field Value Type Description Int32 REMOVED_SAMPLES Declaration public const int REMOVED_SAMPLES = 33552 Field Value Type Description Int32 RESET Declaration public const int RESET = 33288 Field Value Type Description Int32 REST_START Declaration public const int REST_START = 32777 Field Value Type Description Int32 REST_STOP Declaration public const int REST_STOP = 32778 Field Value Type Description Int32 SEGMENT_START Declaration public const int SEGMENT_START = 32771 Field Value Type Description Int32 SEGMENT_STOP Declaration public const int SEGMENT_STOP = 32772 Field Value Type Description Int32 TARGET Declaration public const int TARGET = 33285 Field Value Type Description Int32 THRESHOLD_PASSED_NEGATIVE Declaration public const int THRESHOLD_PASSED_NEGATIVE = 33296 Field Value Type Description Int32 THRESHOLD_PASSED_POSITIVE Declaration public const int THRESHOLD_PASSED_POSITIVE = 33289 Field Value Type Description Int32 TRAIN Declaration public const int TRAIN = 33281 Field Value Type Description Int32 TRAIN_COMPLETED Declaration public const int TRAIN_COMPLETED = 33287 Field Value Type Description Int32 TRIAL_START Declaration public const int TRIAL_START = 32773 Field Value Type Description Int32 TRIAL_STOP Declaration public const int TRIAL_STOP = 32774 Field Value Type Description Int32 VISUAL_STEADY_STATE_STIMULATION_START Declaration public const int VISUAL_STEADY_STATE_STIMULATION_START = 32784 Field Value Type Description Int32 VISUAL_STEADY_STATE_STIMULATION_STOP Declaration public const int VISUAL_STEADY_STATE_STIMULATION_STOP = 32785 Field Value Type Description Int32 VISUAL_STIMULATION_START Declaration public const int VISUAL_STIMULATION_START = 32779 Field Value Type Description Int32 VISUAL_STIMULATION_STOP Declaration public const int VISUAL_STIMULATION_STOP = 32780 Field Value Type Description Int32"
  },
  "api/LSL4Unity.OV.Template.DoubleInlet.html": {
    "href": "api/LSL4Unity.OV.Template.DoubleInlet.html",
    "title": "Class DoubleInlet | LSL 4 Unity documentation",
    "keywords": "Class DoubleInlet Just an example implementation for a Inlet receiving double values for OpenViBE Link. Inheritance Object OVInlet < Double > OVDoubleInlet DoubleInlet Inherited Members OVDoubleInlet.PullSamples() OVInlet<Double>.StreamName OVInlet<Double>.inlet OVInlet<Double>.expectedChannels OVInlet<Double>.samples OVInlet<Double>.ForceUpdate() Namespace : LSL4Unity.OV.Template Assembly : cs.temp.dll.dll Syntax public class DoubleInlet : OVDoubleInlet Properties LastSample Declaration public double[] LastSample { get; } Property Value Type Description Double [] Methods Process(Double[], Double) Override this method in the subclass to specify what should happen when samples are available. Declaration protected override void Process(double[] input, double time) Parameters Type Name Description Double [] input Double time The current Time. Overrides LSL4Unity.OV.OVInlet<System.Double>.Process(System.Double[], System.Double) See Also OVFloatInlet"
  },
  "api/LSL4Unity.OV.Template.FloatInlet.html": {
    "href": "api/LSL4Unity.OV.Template.FloatInlet.html",
    "title": "Class FloatInlet | LSL 4 Unity documentation",
    "keywords": "Class FloatInlet Just an example implementation for a Inlet receiving Float values for OpenViBE Link. Inheritance Object OVInlet < Single > OVFloatInlet FloatInlet Inherited Members OVFloatInlet.PullSamples() OVInlet<Single>.StreamName OVInlet<Single>.inlet OVInlet<Single>.expectedChannels OVInlet<Single>.samples OVInlet<Single>.ForceUpdate() Namespace : LSL4Unity.OV.Template Assembly : cs.temp.dll.dll Syntax public class FloatInlet : OVFloatInlet Properties LastSample Declaration public float[] LastSample { get; } Property Value Type Description Single [] Methods Process(Single[], Double) Override this method in the subclass to specify what should happen when samples are available. Declaration protected override void Process(float[] input, double time) Parameters Type Name Description Single [] input Double time The current Time. Overrides LSL4Unity.OV.OVInlet<System.Single>.Process(System.Single[], System.Double) See Also OVFloatInlet"
  },
  "api/LSL4Unity.OV.Template.html": {
    "href": "api/LSL4Unity.OV.Template.html",
    "title": "Namespace LSL4Unity.OV.Template | LSL 4 Unity documentation",
    "keywords": "Namespace LSL4Unity.OV.Template Classes DoubleInlet Just an example implementation for a Inlet receiving double values for OpenViBE Link. FloatInlet Just an example implementation for a Inlet receiving Float values for OpenViBE Link. MatrixInlet Implementation for a Inlet receiving Matrix (double) from OpenViBE. StimulationInlet Implementation for a Inlet receiving Stimulations (int) from OpenViBE. StimulationOutlet Implementation for a Inlet receiving Stimulations (int) from OpenViBE."
  },
  "api/LSL4Unity.OV.Template.MatrixInlet.html": {
    "href": "api/LSL4Unity.OV.Template.MatrixInlet.html",
    "title": "Class MatrixInlet | LSL 4 Unity documentation",
    "keywords": "Class MatrixInlet Implementation for a Inlet receiving Matrix (double) from OpenViBE. Inheritance Object OVInlet < Double > OVDoubleInlet MatrixInlet Inherited Members OVDoubleInlet.PullSamples() OVInlet<Double>.StreamName OVInlet<Double>.inlet OVInlet<Double>.expectedChannels OVInlet<Double>.samples OVInlet<Double>.ForceUpdate() Namespace : LSL4Unity.OV.Template Assembly : cs.temp.dll.dll Syntax public class MatrixInlet : OVDoubleInlet Fields matrix Declaration public double[, ] matrix Field Value Type Description Double [,] nChannel Declaration public int nChannel Field Value Type Description Int32 nSample Declaration public int nSample Field Value Type Description Int32 readyToSend Declaration public bool readyToSend Field Value Type Description Boolean Methods Process(Double[], Double) Declaration protected override void Process(double[] input, double time) Parameters Type Name Description Double [] input Double time Overrides LSL4Unity.OV.OVInlet<System.Double>.Process(System.Double[], System.Double) See Also OVDoubleInlet"
  },
  "api/LSL4Unity.OV.Template.StimulationInlet.html": {
    "href": "api/LSL4Unity.OV.Template.StimulationInlet.html",
    "title": "Class StimulationInlet | LSL 4 Unity documentation",
    "keywords": "Class StimulationInlet Implementation for a Inlet receiving Stimulations (int) from OpenViBE. Inheritance Object OVInlet < Int32 > OVIntInlet StimulationInlet Inherited Members OVIntInlet.PullSamples() OVInlet<Int32>.StreamName OVInlet<Int32>.inlet OVInlet<Int32>.expectedChannels OVInlet<Int32>.samples OVInlet<Int32>.ForceUpdate() Namespace : LSL4Unity.OV.Template Assembly : cs.temp.dll.dll Syntax public class StimulationInlet : OVIntInlet Properties LastSample Declaration public int[] LastSample { get; } Property Value Type Description Int32 [] Methods Process(Int32[], Double) Override this method in the subclass to specify what should happen when samples are available. Declaration protected override void Process(int[] input, double time) Parameters Type Name Description Int32 [] input Double time The current Time. Overrides LSL4Unity.OV.OVInlet<System.Int32>.Process(System.Int32[], System.Double) See Also OVIntInlet"
  },
  "api/LSL4Unity.OV.Template.StimulationOutlet.html": {
    "href": "api/LSL4Unity.OV.Template.StimulationOutlet.html",
    "title": "Class StimulationOutlet | LSL 4 Unity documentation",
    "keywords": "Class StimulationOutlet Implementation for a Inlet receiving Stimulations (int) from OpenViBE. Inheritance Object OVOutlet < Int32 > OVIntOutlet StimulationOutlet Inherited Members OVIntOutlet.PushSamples() OVOutlet<Int32>.StreamName OVOutlet<Int32>.ChannelCount OVOutlet<Int32>.outlet OVOutlet<Int32>.info OVOutlet<Int32>.samples OVOutlet<Int32>.streamType OVOutlet<Int32>.ForceUpdate(Int32[]) Namespace : LSL4Unity.OV.Template Assembly : cs.temp.dll.dll Syntax public class StimulationOutlet : OVIntOutlet Methods Process(Int32[]) Override this method in the subclass to specify what should happen when samples are available. Declaration protected override void Process(int[] input) Parameters Type Name Description Int32 [] input Overrides LSL4Unity.OV.OVOutlet<System.Int32>.Process(System.Int32[]) See Also OVIntOutlet"
  },
  "api/LSL4Unity.Resolver.html": {
    "href": "api/LSL4Unity.Resolver.html",
    "title": "Class Resolver | LSL 4 Unity documentation",
    "keywords": "Class Resolver Encapsulates the lookup logic for LSL streams with an event based appraoch your custom stream inlet implementations could be subscribed to the On. Inheritance Object Resolver Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class Resolver : MonoBehaviour, IEventSystemHandler Fields forgetStreamAfter Declaration public float forgetStreamAfter Field Value Type Description Single onStreamFound Declaration public StreamEvent onStreamFound Field Value Type Description StreamEvent onStreamLost Declaration public StreamEvent onStreamLost Field Value Type Description StreamEvent streams Declaration public List<LSLStreamInfoWrapper> streams Field Value Type Description List < LSLStreamInfoWrapper > Methods IsStreamAvailable(out LSLStreamInfoWrapper, String, String, String) Declaration public bool IsStreamAvailable(out LSLStreamInfoWrapper info, string streamName = \"\", string streamType = \"\", string hostName = \"\") Parameters Type Name Description LSLStreamInfoWrapper info String streamName String streamType String hostName Returns Type Description Boolean"
  },
  "api/LSL4Unity.ScriptOrder.html": {
    "href": "api/LSL4Unity.ScriptOrder.html",
    "title": "Class ScriptOrder | LSL 4 Unity documentation",
    "keywords": "Class ScriptOrder This attribute is used to define specific script execution orders when necessary! Example: LSLTimeSync -> should be called at the beginning of each frame before other scripts use it's properties. Original from Unity forum: https://forum.unity3d.com/threads/script-execution-order-manipulation.130805/ Inheritance Object Attribute ScriptOrder Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax public class ScriptOrder : Attribute, _Attribute Constructors ScriptOrder(Int32) Declaration public ScriptOrder(int order) Parameters Type Name Description Int32 order Fields order Declaration public readonly int order Field Value Type Description Int32"
  },
  "api/LSL4Unity.StreamEvent.html": {
    "href": "api/LSL4Unity.StreamEvent.html",
    "title": "Class StreamEvent | LSL 4 Unity documentation",
    "keywords": "Class StreamEvent Inheritance Object StreamEvent Namespace : LSL4Unity Assembly : cs.temp.dll.dll Syntax [Serializable] public class StreamEvent : UnityEvent<LSLStreamInfoWrapper>"
  },
  "index.html": {
    "href": "index.html",
    "title": "LSL4Unity | LSL 4 Unity documentation",
    "keywords": "LSL4Unity It's a Forks of an integration approach of the LabStreamingLayer Framework for Unity3D providing the following features. Simple Editor Integration to lookup LSL streams. Provides a ready to use Marker stream implementation. Basic implementations and examples for LSL inlets and outlets. Build hooks to copy correct platform library to the build directory See the Project Wiki to get more details and installation instructions. Also, see the Tips ! This is still under active development, so if something did not work properly stay calm, create an issue on github. Contributions are welcome! LSL ships a C# wrapper for the LSL lib - why should I use an additional wrapper? Good question - LSL4Unity tries to provide an enhanced user experience within Unity. It is intented to solve several issues, instable framerates results in irregular sampling intervalls plattform dependent compilation when using an Game Engine - in this case Unity - as a data provider within your experiments. We also try to provide an easy start with predefined implementations which supports a integration into the EEGLAB, BCILAB and MoBILAB ecosystem. Far from finished :X Compatibility info Currently LSL works only with x64 builds might work x64 and x86 builds of Unity3D projects! I got the whole thing running on both platforms under Windows. Linux and MacOS X Support seems to be working at least in the editor but more testing is necessary. Contributions are welcome! Just try to build the example scene on your platform and report potential errors as issues! Dependencies In the current Version, the Asset package ships a sligthly modified version of the C# LSL API and the plugin binaries. The LabStreaming Layer is original created by SCCN und could be found at https://github.com/sccn/labstreaminglayer . It's highly recommended to read the section about the Time Synchronization before building your own experiments! My changes V1.0 : Update of coding rules and standard uses. Documenting of source code. Add OpenViBE Inlets and templates. Current Version : Remove Original Examples and demos. Add Github Action to auto-generate doc. Update Documentation."
  }
}